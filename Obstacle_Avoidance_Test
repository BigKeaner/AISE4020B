The following was used to test the obstacle avoidance for the car. A video can be found in the google drive link.

sh ros2_humble.sh 
ros2 run yahboomcar_laser laser_Avoidance # The Yahboom file that we edit, the code for that is:

'''
#Create a radar subscriber to subscribe to radar data and remote control data and a speed publisher to publish speed data
self.sub_laser = self.create_subscription(LaserScan,"/scan",self.registerScan,1)
self.sub_JoyState = self.create_subscription(Bool,'/JoyState', self.JoyStateCallback,1)
self.pub_vel = self.create_publisher(Twist,'/cmd_vel',1)
#Radar callback function: processes subscribed radar data
ranges = np.array(scan_data.ranges)
for i in range(len(ranges)):
    angle = (scan_data.angle_min + scan_data.angle_increment * i) * RAD2DEG
#Determine whether there are obstacles in front, left or right according to the set radar detection angle and obstacle detection distance.
if angle > 180: angle = angle - 360
if 20 < angle < self.LaserAngle:
    if ranges[i] < self.ResponseDist*1.5:
        self.Left_warning += 1
if -self.LaserAngle < angle < -20:
    if ranges[i] < self.ResponseDist*1.5:
        self.Right_warning += 1
if abs(angle) <= 20:
    if ranges[i] <= self.ResponseDist*1.5: 
        self.front_warning += 1
#According to the detected obstacles, the speed of the car is released so that the car can avoid the obstacles.
if self.front_warning > 10 and self.Left_warning > 10 and self.Right_warning > 10:
    print ('1, there are obstacles in the left and right, turn right')
    twist.linear.x = self.linear
    twist.angular.z = -self.angular
    self.pub_vel.publish(twist)
    sleep(0.2)
        
elif self.front_warning > 10 and self.Left_warning <= 10 and self.Right_warning > 10:
    print ('2, there is an obstacle in the middle right, turn left')
    twist.linear.x = self.linear
    twist.angular.z = self.angular
    self.pub_vel.publish(twist)
    sleep(0.2)

'''

